PROBLEM STATEMENT:
Given an array nums of n integers, your task is to find the maximum value of k for which there exist two adjacent subarrays of length k each, such that both subarrays are strictly increasing. Specifically, check if there are two subarrays of length k starting at indices a and b (a < b), where:

Both subarrays nums[a..a + k - 1] and nums[b..b + k - 1] are strictly increasing.
The subarrays must be adjacent, meaning b = a + k.
Return the maximum possible value of k.

A subarray is a contiguous non-empty sequence of elements within an array.

SOLUTION:
                                                                                                  TIME COMPLEXITY: O(n)
                                                                                                  SPACE COMPLEXITY: O(1)

class Solution {
    public int maxIncreasingSubarrays(List<Integer> nums) {
        int i=0,k=0,j=i;
        while(j<nums.size()-1 && nums.get(j)<nums.get(j+1)){
            j++;
        }
        int l1= j-i+1;
        k= Math.max(k, l1/2);
        j++;
        int m=j;
        while(m<nums.size()){
            j=m;
            while(m<nums.size()-1 && nums.get(m)<nums.get(m+1)){
                m++;
            }
            int l2= m-j+1;
            k= Math.max(k, l2/2);
            k= Math.max(k, Math.min(l1,l2));
            l1=l2;
            m++;
        }
        return k;
    }
}
