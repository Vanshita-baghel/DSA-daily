PROBLEM STATEMENT:
Given an array nums of n integers and an integer k, determine whether there exist two adjacent subarrays of length k such that both subarrays are strictly increasing. Specifically, check if there are two subarrays starting at indices a and b (a < b), where:

Both subarrays nums[a..a + k - 1] and nums[b..b + k - 1] are strictly increasing.
The subarrays must be adjacent, meaning b = a + k.
Return true if it is possible to find two such subarrays, and false otherwise.

SOLUTION:

                                                                                          TIME COMPLEXITY: O(n)
                                                                                          SPACE COMPLEXITY: O(1)

class Solution {
    public boolean hasIncreasingSubarrays(List<Integer> nums, int k) {
        
        int n= nums.size();

        int i=0;
        while(i<=n-2*k){
            int j=i;
            while(j<i+k-1 && nums.get(j)<nums.get(j+1) && nums.get(j+k)<nums.get(j+k+1)){
                j++;
            }

            if(j== i+k-1)   return true;

            i=j+1;
        }

        return false;
    }
}


                                                                                          TIME COMPLEXITY: O(n*k)
                                                                                          SPACE COMPLEXITY: O(1)
class Solution {
    public boolean hasIncreasingSubarrays(List<Integer> nums, int k) {
        
        int n= nums.size();

        for(int i=0; i<=n-2*k; i++){
            if(isIncreasingSubsequence(i,i+k, nums))  return true;
        }
        return false;
    }

    public boolean isIncreasingSubsequence(int i, int j, List<Integer> nums){
        int n= j-i;

        for(int m=0; m<=n-2; m++){
            int curi= i+m, curj= j+m;
            if(nums.get(curi+1)<= nums.get(curi) || nums.get(curj+1)<= nums.get(curj))    return false;
        }

        return true;
    }
}
