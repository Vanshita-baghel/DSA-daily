PROBLEM STATEMENT:
You are given two integer arrays, skill and mana, of length n and m, respectively.

In a laboratory, n wizards must brew m potions in order. Each potion has a mana capacity mana[j] and must pass through all the wizards sequentially to be brewed properly. The time taken by the ith wizard on the jth potion is timeij = skill[i] * mana[j].

Since the brewing process is delicate, a potion must be passed to the next wizard immediately after the current wizard completes their work. This means the timing must be synchronized so that each wizard begins working on a potion exactly when it arrives. â€‹

Return the minimum amount of time required for the potions to be brewed properly.

SOLUTION:

                                                                                  TIME COMPLEXITY: O(m*n)
                                                                                  SPACE COMPLEXITY: O(n)

class Solution {
    public long minTime(int[] skill, int[] mana) {
        int n= skill.length, m= mana.length;
        long[] prev= new long[n];
        prev[0]= skill[0]*mana[0];
        for(int i=1; i<n; i++){
            prev[i]= (skill[i]*mana[0])+ prev[i-1];
        }

        //for all the potions
        for(int i=1; i<m; i++){
            //for all the wizards
            long time= skill[0]*mana[i];
            prev[0]= prev[0]+time;
            for(int j=1; j<n; j++){
                long t= skill[j]*mana[i];
                prev[j]= Math.max(prev[j], prev[j-1])+t;
            }
            //move backward and make them synchronised
            for(int j=n-1; j>=1; j--){
                long t= skill[j]*mana[i];
                prev[j-1]= prev[j]-t;
            }

        }
        return prev[n-1];
    }
}
