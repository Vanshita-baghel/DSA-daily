PROBLEM STATEMENT:
You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.

You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.

Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.

SOLUTION:
                                                                                              TIME COMPLEXITY:  O((m+n)logm)
                                                                                              SPACE COMPLEXITY: O(1)

class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        Arrays.sort(potions);

        int n= spells.length, m= potions.length;
        int[] res= new int[n];
        for(int i=0; i<n; i++){
            long num= (success/spells[i]);
            int ind=0;
            if(success%spells[i]==0)    ind= binarySearch(potions, num);
            else    ind= binarySearch(potions, num+1);
            
            if(ind>=potions.length){
                res[i]=0;
            }
            else{
                int cnt= (ind<0)? m: m-ind;
                res[i]= cnt;
            }
        }
        return res;
    }
    public int binarySearch(int[] nums, long target){
        int left=0, right= nums.length-1;
        while(left<=right){
            int mid= (left+right)/2;
            if(nums[mid]==target){
                if(mid-1>0 && nums[mid-1]==target){
                    right= mid-1;
                    continue;
                }
                return mid;
            }
            else if(nums[mid]<target)   left= mid+1;
            else    right= mid-1;
        }
        return left;
    }
}
